pta-实验3-Q5，

#include<stdio.h>
int main(){
    int sel(int size,char arr[]);
    int M,N,i,j;
    scanf("%d %d\n",&N,&M);
    char ch[N+1];
    for(i=0;i<M;i++){
        scanf("%s\n",&ch);
        printf("%d\n",sel(N,ch));
    }
    
}
int sel(int size,char arr[]){
    int k,root = 1;
    for(k=0;k<size;k++){
        switch(arr[k]){
            case 'n': root = 2*root;break;
            case 'y': root = 2*root - 1;break;
            default:root = 0;
        }
    }
    return root;
}

成功运行

------------------------------------------------------------------------------------

pat-basic-1009


#include<iostream>
#include<algorithm>
#include<vector>
#include<string>
using namespace std;

int main(){
    string s,s1;
    while(cin>>s1){
        s += ' '+s1;//the ' ' is critical, which can help us identify the words'boundary.but string s's first char is also' ', so we should be cautious.  
    }//the input form is string. If you choose vector, you would have to input the chars one by one.

    int len = s.length();
    vector<char>str(len);
    for(int i=0;i<len;i++){
        str[i] = s[i];
    }//"transfer" string into vector. Attention: The last char of the vector is ' '.
    reverse(str.begin(),str.end());//from <algorithm>
    
    int tmp = 0;
    for(int i=0;i<len;i++){
        if(str[i]==' '){
            reverse(str.begin()+tmp,str.begin()+i);
            tmp = i+1;
        }
    }//reverse the words. Thanks for the last char ' ', we can also reverse the last word!
    
    for(int i=0;i<len-1;i++){//i<len-1, not i<len, because we don't want the end of the output to be ' '.
        printf("%c",str[i]);
    }
    printf("\n");
    return 0;
}
